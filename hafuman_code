#include<stdio.h>
#include<stdlib.h> 
#include<string.h>

unsigned char line[1024 * 8 * 8], stack[128];
unsigned char line2[1024 * 8];
unsigned char ascii[256][128];
int sta=0, yu;

typedef struct huffman{
	unsigned char value;
	struct huffman *lc;
	struct huffman *rc;
}	hf;
typedef hf* hfptr;

void compress(char filename[]);
int sort(int asc[],int least1);
hfptr maketree(int count,int asc[]);
void preFrequ(int asc[]);
void preCompress(hfptr root,char filename[]);
void preorder(hfptr root,unsigned char ch);
int filewrite(FILE *nfptr, int count);
void decompress(char filename[]);

int main(void)
{
	FILE * fptr;
	char loc[100];
	int judge;
	printf("如果你想要压缩文件，请输入1；如果你想解压缩文件，请输入2！\n");
	scanf("%d",&judge);
	if(judge == 1){
		printf("请输入文件名！\n");
		getchar();
		gets(loc); compress(loc);
	}else if(judge == 2){
		printf("请输入解码文件名！\n");
		getchar();
		gets(loc); decompress(loc);
	}
		
}

void decompress(char filename[])
{
	FILE *fptr,*freptr,*fptr2;
	int asc[256], tem, i = 0, count = 0, max;
	hfptr root, current;
	char newfile[100];
	printf("请输入你想要解压缩后的文件名：\n");
	scanf("%s",newfile);
	unsigned char temp, tem2, q[8];
	if((freptr = fopen("frequency.txt","rb")) != NULL){
		fread(&tem,sizeof(int),1,freptr);
		while(!feof(freptr) && i < 256){
			asc[i] = tem; i++;
			fread(&tem,sizeof(int),1,freptr);
		}fread(&tem,sizeof(int),1,freptr);
		yu = tem;
	}fclose(freptr);
	root = maketree(256,asc); current = root;
	if((fptr = fopen(filename,"rb")) != NULL){
	if((fptr2 = fopen(newfile,"wb")) != NULL){
		fread(&temp,sizeof(unsigned char),1,fptr);
		if(feof(fptr)) 
			{if(yu != 0) max = yu;
			else if(yu == 0) max = 8;} 
		else max = 8;
		while(!feof(fptr)){
			i = 0;
			while(i < 1024 * 8 && !feof(fptr)){
				for(count = 0;count < max;count++){
					q[count] = (temp & 1) + '0';
					temp = temp >> 1;
				}
				for(;count >= 0; i++,count--){
					line2[i] = q[count];
				}
				fread(&temp,sizeof(unsigned char),1,fptr);
				if(feof(fptr))
					{if(yu != 0) max = yu;
					else if(yu == 0) max = 8;} 
				else max = 8;
			}count = 0;
			while(i >= 0){
				if(line2[count] == '0') current = current->lc;
				else if(line2[count] == '1') current = current->rc;
				if(current->lc == NULL && current->rc == NULL){
					tem2 = current->value;
					fwrite(&tem2,sizeof(unsigned char),1,fptr2);
					current = root;
				}
				i--; count++;
			}
		}
	}
	}
}

void compress(char filename[])
{
	FILE *fptr,*fptr2;
	int asc[256] = {0}, k =0;
	for(k = 0; k < 256 ;k++)
		asc[k] = 1;
	int i = 0, count2 = 1;
	unsigned char tem, temp;
	hfptr root;
	if((fptr = fopen(filename,"rb")) != NULL){
		fread(&tem,sizeof(unsigned char),1,fptr);
		while(!feof(fptr) && count2 < 1024*16 ){
			asc[(int) tem]++;
			count2++;fread(&tem,sizeof(unsigned char),1,fptr);
		}	
	}fclose(fptr);
	printf("读入文件成功！！！\n");
	preFrequ(asc);
	root = maketree(256,asc);
	printf("构建哈夫曼树成功！！！\n"); 
	preCompress(root,filename);
}

void preFrequ(int asc[])
{
	FILE *fptr;
	int i, tem;
	if((fptr = fopen("frequency.txt","wb")) != NULL){
		for(i = 0;i < 256; i++){
			tem = asc[i];
			fwrite(&tem,sizeof(int),1,fptr);
		}
	}fclose(fptr);
}

hfptr maketree(int count,int asc[])
{
	int least1, least2;
	hfptr lc1, rc1, pa, p[256], root;
	int sign[256], i = 0;
	for(i = 0; i < 256; i++)
		sign[i] = 0;
	while(count != 1){
		least1 = sort(asc,-1); least2 = sort(asc,least1);
		if(sign[least1] == 0){
			lc1 = malloc(sizeof(hf));lc1->value = least1;lc1->lc = NULL;lc1->rc = NULL;
		}else lc1 = p[least1];
		if(sign[least2] == 0){
			rc1 = malloc(sizeof(hf));rc1->value = least2;rc1->lc = NULL;rc1->rc = NULL;
		}else rc1 = p[least2];
		asc[least1] += asc[least2];
		asc[least2] = 0;
		pa = malloc(sizeof(hf)); pa->lc = lc1; pa->rc = rc1; pa->value = -1; 
		p[least1] = pa;
		sign[least1] = 1; sign[least2] = 1;
		count--;
		if( count != 1) pa = NULL;
		else root = pa;
	}
	return root;
}

void preCompress(hfptr root,char filename[])
{
	FILE *ofptr, *nfptr, *fptr;
	char newfile[50];
	unsigned char ch; 
	int count = 0, i = 0;
	printf("请输入压缩文件的名字：\n");
	gets(newfile);
	preorder(root,-1);
	if((nfptr = fopen(newfile,"wb")) != NULL){
		if((ofptr = fopen(filename,"rb")) != NULL){
			fread(&ch,sizeof(unsigned char),1,ofptr);
			while(!feof(ofptr)){
				for(i = 0; i < strlen(ascii[(int) ch]);){
					line[count] = ascii[(int) ch][i];
					count++; i++;
					if(count == 1024 * 8 * 8) count = filewrite(nfptr, count);
				}
				fread(&ch,sizeof(unsigned char),1,ofptr);
			}if(count != 0) 
				count = filewrite(nfptr, count);
		}fclose(ofptr);
	}fclose(nfptr);
	if((fptr = fopen("frequency.txt","ab")) != NULL)
		fwrite(&yu,sizeof(int),1,fptr);
	fclose(fptr);
}

int filewrite(FILE *nfptr, int count)
{
	int i = 0, j = 0, tem = 0;
	unsigned char ch;
	yu = count % 8;
	for(j = 0; j < yu; j++, count++)
		line[count] = '0';
	while(i < count){
		tem = 0;
		for(j = 0; j < 8 ; j++){
			tem = tem*2 + (line[i]-'0');
			i++;
		}ch = tem;
		fwrite(&ch,sizeof(unsigned char),1,nfptr);
	}
	return 0;
}

void preorder(hf *root,unsigned char ch)
{
	unsigned char cha;
	int i;
	if((ch == '0' || ch == '1') && (root->lc != NULL || root->rc != NULL)){
		stack[sta] = ch; sta ++;
	}
	else if(root->lc == NULL && root->rc == NULL){
		cha = root->value;
		stack[sta] = ch;sta ++;
		for(i = 0;i < sta;i ++){
			ascii[(int) cha][i] = stack[i];
		}ascii[(int) cha][sta] = '\0';
	}
	if(root->lc) preorder(root->lc,'0');
	if(root->rc) preorder(root->rc,'1');
	sta--;
}

int sort(int asc[], int least1)
{
	int f,i,temp;
	f = 1000000;
	for(i = 0;i < 256; i++){
		if(asc[i] > 0 && f > asc[i] && i != least1)
		{
			f = asc[i];
			temp = i;
		}
	}
	return temp;
}
